string(ASCII 27 ESC)
set(RESET "${ESC}[0m")
set(RED "${ESC}[0;31m")
set(GREEN "${ESC}[0;32m")
SET(YELLOW "${ESC}[0;33m")
set(BLUE "${ESC}[0;34m")
set(MAGENTA "${ESC}[0;35m")
set(CYAN "${ESC}[0;36m")
set(WHITE "${ESC}[0;37m")
set(BOLDBLACK "${ESC}[1m${ESC}[30m")
set(BOLDRED "${ESC}[1m${ESC}[31m")
set(BOLDGREEN "${ESC}[1m${ESC}[32m")
set(BOLDYELLOW "${ESC}[1m${ESC}[33m")
set(BOLDBLUE "${ESC}[1m${ESC}[34m")
set(BOLDMAGENTA "${ESC}[1m${ESC}[35m")
set(BOLDCYAN "${ESC}[1m${ESC}[36m")
set(BOLDWHITE "${ESC}[1m${ESC}[37m")
set(BOLD "${ESC}[1m")
set(DIM "${ESC}[2m")
set(ITALIC "${ESC}[3m")
set(UNDERLINE "${ESC}[4m")
set(BLINK "${ESC}[5m")
set(REVERSE "${ESC}[7m")
set(HIDDEN "${ESC}[8m")
set(CHECKMARK "✔")
set(CHECKMARK_COLOR ${GREEN})
set(CROSS "✘")
set(CROSS_COLOR ${RED})
  

function(printvar var)
  # if var is a list of variables, print each one recursively
  # if var is empty or undefined, print in red
  if(NOT DEFINED ${var} OR "${${var}}" STREQUAL "")
    message(STATUS "${RED}${var}${RESET} = <empty>")
  else()
    message(STATUS "${GREEN}${var}${RESET} = ${${var}}")
  endif()
endfunction()

function(printlist var)
  list(LENGTH ${var} COUNT)
  message(STATUS "${GREEN}${var}${RESET} = (${CYAN}${COUNT}${RESET} elements)")
  set(i 0)
  foreach(f ${${var}})
    message(STATUS " ${i}. ${f}")
    math(EXPR i "${i} + 1")
  endforeach()
endfunction()

function(tree dir)
  message(STATUS "${GREEN}${dir}${RESET}")
  file(GLOB children RELATIVE ${dir} ${dir}/*)
  foreach(child ${children})
    if(IS_DIRECTORY ${dir}/${child})
      tree(${dir}/${child})
    else()
      message(STATUS "  ${dir}/${child}")
    endif()
  endforeach()
endfunction()

function(print_target_linked_libraries target) 
  get_target_property(LINKED_LIBRARIES ${target} LINK_LIBRARIES)
  list(LENGTH LINKED_LIBRARIES LINKED_LIBRARIES_COUNT)
  message(STATUS "target ${GREEN}${target}${RESET} linked against ${CYAN}${LINKED_LIBRARIES_COUNT}${RESET} libraries:")
  foreach(link_lib ${LINKED_LIBRARIES})
    # if the library is a shared object file, check if it exists
    set(color ${BOLD})
    if(${link_lib} MATCHES "\\.so")
      if(NOT EXISTS ${link_lib})
        set(color ${RED})
        message(STATUS " - [${CROSS_COLOR}${CROSS}${RESET}] ${color}${link_lib}${RESET}")
        continue()
      else()
      message(STATUS " - [${CHECKMARK_COLOR}${CHECKMARK}${RESET}] ${color}${link_lib}${RESET}")  
        continue()
      endif()  
    endif()
    message(STATUS " - ${color}${link_lib}${RESET}")
  endforeach()
#   message(STATUS "")
endfunction()

function(print_target_included_directories target)
  get_target_property(INCLUDE_DIRECTORIES ${target} INCLUDE_DIRECTORIES)
  list(LENGTH INCLUDE_DIRECTORIES INCLUDE_DIRECTORIES_COUNT)
  message(STATUS "target ${GREEN}${target}${RESET} include directories ${CYAN}${INCLUDE_DIRECTORIES_COUNT}${RESET}: (${CHECKMARK_COLOR}${CHECKMARK}${RESET} = exists, ${CROSS_COLOR}${CROSS}${RESET} = does not exist)")
  set(directories_exist_count 0)
  foreach(include_dir ${INCLUDE_DIRECTORIES})
    # check if the include directory exists
    if(NOT EXISTS ${include_dir})
      set(mark ${CROSS})
      set(color ${CROSS_COLOR})
    else()
        set(mark ${CHECKMARK})
        set(color ${CHECKMARK_COLOR})
        math(EXPR directories_exist_count "${directories_exist_count} + 1")
        endif()
    message(STATUS " - [${color}${mark}${RESET}] ${BOLD}${include_dir}${RESET}")
  endforeach()
    message(STATUS "${directories_exist_count} of ${INCLUDE_DIRECTORIES_COUNT} directories exist")
endfunction()

function(print_target_sources target)
  get_target_property(SOURCES ${target} SOURCES)
  list(LENGTH SOURCES SOURCES_COUNT)

  message(STATUS "target ${GREEN}${target}${RESET} sources ${CYAN}${SOURCES_COUNT}${RESET}: (${CHECKMARK_COLOR}${CHECKMARK}${RESET} = exists, ${CROSS_COLOR}${CROSS}${RESET} = does not exist)")
  set(sources_exist_count 0)
  foreach(source ${SOURCES})
    # if the source file does not exist, print in bold
    if (NOT EXISTS ${source})
      set(color ${RED})
      set(mark ${CROSS})
      set(mark_color ${CROSS_COLOR})
    else()
      set(color ${BOLD})
      set(mark ${CHECKMARK})
      set(mark_color ${CHECKMARK_COLOR})
      math(EXPR sources_exist_count "${sources_exist_count} + 1")
    endif()
    message(STATUS " - [${mark_color}${mark}${RESET}] ${color}${source}${RESET}")
  endforeach()
    message(STATUS "${sources_exist_count} of ${SOURCES_COUNT} sources exist")
endfunction()

function(print_target_compile_definitions target)
  get_target_property(COMPILE_DEFINITIONS ${target} COMPILE_DEFINITIONS)
  if (${COMPILE_DEFINITIONS} STREQUAL "COMPILE_DEFINITIONS-NOTFOUND")
    message(STATUS "compile definitions not found for target ${GREEN}${target}${RESET}")
    return()
  endif()
  list(LENGTH COMPILE_DEFINITIONS COMPILE_DEFINITIONS_COUNT)
  message(STATUS "target ${GREEN}${target}${RESET} compile definitions ${CYAN}${COMPILE_DEFINITIONS_COUNT}${RESET}:")
  foreach(compile_definition ${COMPILE_DEFINITIONS})
    message(STATUS " - ${compile_definition}")
  endforeach()
#   message(STATUS "")
endfunction()

function(print_target_compile_features target)
  get_target_property(COMPILE_FEATURES ${target} COMPILE_FEATURES)
  if (${COMPILE_FEATURES} STREQUAL "COMPILE_FEATURES-NOTFOUND")
    message(STATUS "compile features not found for target ${GREEN}${target}${RESET}")
    return()
  endif()
  list(LENGTH COMPILE_FEATURES COMPILE_FEATURES_COUNT)
  message(STATUS "target ${GREEN}${target}${RESET} compile features ${CYAN}${COMPILE_FEATURES_COUNT}${RESET}:")
  foreach(compile_feature ${COMPILE_FEATURES})
    message(STATUS " - ${compile_feature}")
  endforeach()
#   message(STATUS "")
endfunction()

function(print_target_compile_options target)
  get_target_property(COMPILE_OPTIONS ${target} COMPILE_OPTIONS)
  if (${COMPILE_OPTIONS} STREQUAL "COMPILE_OPTIONS-NOTFOUND")
    message(STATUS "compile options not found for target ${GREEN}${target}${RESET}")
    return()
  endif()
  list(LENGTH COMPILE_OPTIONS COMPILE_OPTIONS_COUNT)
  message(STATUS "target ${GREEN}${target}${RESET} compile options ${CYAN}${COMPILE_OPTIONS_COUNT}${RESET}:")
  foreach(compile_option ${COMPILE_OPTIONS})
    message(STATUS " - ${compile_option}")
  endforeach()
#   message(STATUS "")
endfunction()

# target_link_directories()
function(print_target_link_directories target)
  get_target_property(LINK_DIRECTORIES ${target} LINK_DIRECTORIES)
  if (${LINK_DIRECTORIES} STREQUAL "LINK_DIRECTORIES-NOTFOUND")
    message(STATUS "link directories not found for target ${GREEN}${target}${RESET}")
    return()
  endif()
  list(LENGTH LINK_DIRECTORIES LINK_DIRECTORIES_COUNT)
  message(STATUS "target ${GREEN}${target}${RESET} link directories ${CYAN}${LINK_DIRECTORIES_COUNT}${RESET}:")
  foreach(link_directory ${LINK_DIRECTORIES})
    message(STATUS " - ${link_directory}")
  endforeach()
#   message(STATUS "")
endfunction()


function(get_terminal_columns output_var)
    execute_process(
        COMMAND bash "-c" "tput cols"
        OUTPUT_VARIABLE terminal_columns
        RESULT_VARIABLE result
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )

    if(NOT result EQUAL 0)
        set(terminal_columns 80)
    endif()

    set(${output_var} ${terminal_columns} PARENT_SCOPE)
endfunction()

function(hr char n)
  set(line "")
  foreach(i RANGE ${n})
    set(line "${line}${char}")
  endforeach()
  message(STATUS "${line}")
endfunction()

function(print_target_information target)
  # determine if target is an executable or a library
  get_target_property(target_type ${target} TYPE)
  if(${target_type} STREQUAL "EXECUTABLE")
    set(target_type "executable")
  elseif(${target_type} STREQUAL "STATIC_LIBRARY")
    set(target_type "static library")
  elseif(${target_type} STREQUAL "SHARED_LIBRARY")
    set(target_type "shared library")
  else()
    set(target_type "unknown")
  endif()

  if(${target_type} STREQUAL "unknown")
    message(WARNING "target ${GREEN}${target}${RESET} is an unknown type")
    return()
  endif()
  
#   set(n 100)
  get_terminal_columns(NUM_TERMINAL_COLUMNS)
  # subtract 4 for the delimiters and 2 for the spaces
  math(EXPR n "${NUM_TERMINAL_COLUMNS} - 4")
#   set(n ${NUM_TERMINAL_COLUMNS})
  set(delim "-")
  
  message(STATUS "target ${GREEN}${target}${RESET} is a ${CYAN}${target_type}${RESET}")
  hr(${delim} ${n})
  print_target_included_directories(${target})
  hr(${delim} ${n})
  print_target_linked_libraries(${target})
  hr(${delim} ${n})
  print_target_link_directories(${target})
  hr(${delim} ${n})
  print_target_sources(${target})
  hr(${delim} ${n})
  print_target_compile_definitions(${target})
  hr(${delim} ${n})
  print_target_compile_features(${target})
  hr(${delim} ${n})
  print_target_compile_options(${target})
  hr(${delim} ${n})
endfunction()